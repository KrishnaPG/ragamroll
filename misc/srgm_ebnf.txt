// antlr grammar created using antlrworks

grammar srgm;

composition :	(WS)? (directive* time_consumer)+ ;
		
time_consumer : (note|rest);

directive : (short_octave_directive | octave_directive | length_directive | raga_directive | tala_directive | jfugue_passthru);

octave_directive : ('O' '=') NUMBER (WS+|EOF);

length_directive : ('L' '=') NUMBER (WS+|EOF); 

short_octave_directive 
	: OCTAVE_SHIFTER (WS+|EOF);

raga_directive : ('Raga' '=') ALPHA (',' NUMBER)? (WS+|EOF); // Digit doesn't go to 11 and 12
tala_directive : ('Tala' '=') ALPHA (',' NUMBER)? (WS+|EOF); // Digit doesn't go to 11 and 12
	
note	: (OCTAVE_SHIFTER)? NOTE (NUMBER)* (WS+ | EOF);

rest	: REST (NUMBER)* (WS+|EOF);

//TODO: remove dependency on jfugue
jfugue_passthru 
	:	('jfugue' ':') (ALPHA|NUMBER|'['|']')* (WS+|EOF);

OCTAVE_SHIFTER : ('<'+ | '>'+);

REST:('z' | 'Z');

NOTE :	( 's' | 'r' | 'g' | 'm' | 'p' | 'd' | 'n' | 'S' | 'R' | 'G' | 'M' | 'P' | 'D' | 'N' );

NUMBER  : (DIGIT)+ ;
 
WS : ( '\t' | ' ' | '\r' | '\n'| '\u000C' )+;
 
fragment DIGIT  : '0'..'9' ;

ALPHA 	:	('a'..'z'|'A'..'Z')+;

COMMENT :	'%' ( ~('\r'|'\n')* ) '\r'? '\n'+ {skip();};
